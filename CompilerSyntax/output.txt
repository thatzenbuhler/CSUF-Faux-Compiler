Operator @
Identifier convert
Seperator (
Identifier fahr
Seperator :
Keyword integer
Seperator )
Endline 
Seperator {
Endline 
Keyword return
Integer 5
Operator *
Seperator (
Identifier fahr
Operator -
Integer 32
Seperator )
Operator /
Integer 9
Seperator ;
Endline 
Seperator }
Endline 
Operator @
Identifier multiply
Seperator (
Identifier a
Seperator :
Keyword integer
Seperator ,
Identifier b
Seperator :
Keyword integer
Seperator )
Endline 
Seperator {
Endline 
Keyword return
Seperator (
Identifier a
Operator *
Identifier b
Seperator )
Seperator ;
Endline 
Seperator }
Endline 
Operator @
Identifier divide
Seperator (
Identifier a
Seperator :
Keyword integer
Seperator ,
Identifier b
Seperator :
Keyword integer
Seperator )
Endline 
Seperator {
Endline 
Keyword return
Seperator (
Identifier a
Operator /
Identifier b
Seperator )
Seperator ;
Endline 
Seperator }
Endline 
Operator %%
Endline 
Keyword integer
Identifier low
Seperator ,
Identifier high
Seperator ,
Identifier step#xy
Seperator ;
Endline 
Keyword read
Seperator (
Identifier low
Seperator ,
Identifier high
Seperator ,
Identifier step#xy
Seperator )
Seperator ;
Endline 
Keyword while
Seperator (
Identifier low
Operator <
Identifier high
Seperator )
Endline 
Seperator {
Keyword write
Seperator (
Identifier low
Seperator )
Seperator ;
Endline 
Keyword write
Seperator (
Identifier convert
Seperator [
Identifier low
Seperator ]
Seperator )
Seperator ;
Endline 
Identifier low
Operator :=
Identifier low
Operator +
Identifier step#xy
Seperator ;
Endline 
Seperator }
Endline 
Keyword write
Seperator (
Identifier multipy
Seperator (
Identifier low
Seperator ,
Identifier high
Seperator )
Seperator )
Seperator ;
Endline 
Keyword write
Seperator (
Identifier divide
Seperator (
Identifier high
Seperator ,
Identifier low
Seperator )
Seperator )
Seperator ;
Endline 
